% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cmodels.R
\name{cmodels}
\alias{cmodels}
\title{Compare Multiple Models}
\usage{
cmodels(
  data,
  outcome,
  model_list,
  model_names = NULL,
  model_type = "glm",
  family = "binomial",
  conf_level = 0.95,
  keep_qc_stats = TRUE,
  add_reference_rows = TRUE,
  ...
)
}
\arguments{
\item{data}{Data.frame or data.table containing the dataset.}

\item{outcome}{Character string specifying the outcome variable. For survival 
analysis, use Surv() syntax, e.g., "Surv(time, status)".}

\item{model_list}{List of character vectors, each containing predictor names 
for one model.}

\item{model_names}{Character vector of names for each model. If NULL, uses 
"Model 1", "Model 2", etc.}

\item{model_type}{Character string: "glm", "lm", "coxph", "clogit". Default "glm".}

\item{family}{For GLM models, the error distribution family. Default "binomial".}

\item{conf_level}{Numeric confidence level. Default 0.95.}

\item{keep_qc_stats}{Logical. Include model quality statistics. Default TRUE.}

\item{add_reference_rows}{Logical. Add reference category rows. Default TRUE.}

\item{...}{Additional arguments passed to model fitting functions.}
}
\value{
A data.table combining results from all models, with the variable 
  column indicating which model each row belongs to.
}
\description{
Fits multiple multivariable models with different predictor sets and combines
results for easy comparison.
}
\details{
This function is useful for comparing nested models, different variable 
selection strategies, or alternative model specifications. All models use
the same outcome and model type for valid comparison.

For automated univariable-to-multivariable workflows with variable selection,
use \code{fastfit()} instead. This function is designed for comparing
pre-specified model specifications.
}
\examples{
# Compare nested models
models <- list(
  demographics = c("age", "sex"),
  clinical = c("age", "sex", "bmi", "bp"),
  full = c("age", "sex", "bmi", "bp", "smoking", "diabetes")
)

comparison <- cmodels(data, "outcome", models,
                         model_names = c("Demographics", 
                                        "Clinical", 
                                        "Full Model"))

# View AIC across models
comparison[, .(AIC = unique(AIC)), by = variable]

# Create forest plot comparing models
forest_plot(comparison, facet_by = "variable")

# For screening-based selection, use fastfit instead:
# auto_model <- fastfit(data, "outcome", all_predictors, method = "screen")

}
\seealso{
\code{\link{mmodel}} for fitting individual models, 
  \code{\link{fastfit}} for automated variable selection workflows
}
